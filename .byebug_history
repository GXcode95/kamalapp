c
last_visit_at.class
last_visit_at.classs
last_visit_at
messages.order(updated_at: :desc).first.created_at.class
messages.order(updated_at: :desc).first.created_at
created_at
created_at.instance
created_at.class
c
exitc
c
exit
c
plop
plop.update(last_visit_at: Time.zone.now)
plop.update(last_visist_at: Time.zone.now)
plop
c
update(last_visit_at: Time.zone.now)
update(last_visit_at:, Time.zone.now)
c
self
slef
update_column(:last_visit_at, Time.zone.now)
update_column(:last_visit_at, Time.zone.now
self
c
message
c
messag.reload
message
c
params
c
message
c
message
c
message
c
cc
c
chatroom_messages_path(other_chatroom, format: :turbo_stream)
c
message
c
message
c
message
message.chatroom
c
exit
c
user1.id
other_chatroom.users.ids
c
current_user.can?(:create, c
current_user.id
@chatroom.chatrooms_users.pluck(:user_id)
@chatroom.chatrooms_users.pluck(:user_ids)
@chatroom.chatrooms_users.plcu(:user_ids)
@chatroom.chatrooms_users.user_ids
@chatroom.chatrooms_users.uer_ids
@chatroom
c
Chatroom.with_exact_user_ids(users)
Chatroom.with_exact_user_ids(users
Chatroom.with_exact_user_ids(users).present?
 Chatroom.create!(user_ids: users)
Chatroom.with_exact_user_ids(users).present?
c
Chatroom.with_exact_user_ids(users).present?
Chatroom.with_exact_user_ids(users)
c
 Chatroom.with_exact_user_ids(users)
c
 Chatroom.with_user_ids(users)
c
 Chatroom.with_user_ids(users)
c
Chatroom.with_user_ids(users)
c
Chatroom.with_exact_users([user.id, friend.id])
Chatroom.create!(user_ids: [user.id, friend.id])
Chatroom.with_exact_users([user.id, friend.id])
Chatroom.with_exact_users([user, friend])
c
Chatroom.last.users_ids
Chatroom.last.user_ids
Chatroom.joins(:users).where(users: [user, friend])
c
saved_change_to_status?('accepted')
saved_change_to_status?
saved_changes['status'].last == 'accepted'
saved_changes['status'] == 'accepted'
save_changed['status'] == 'accepted'
save_changes['status'] == 'accepted'
saved_changes
self.changes
self
changes
c
Friendship.first.update(status: :pending)
Friendship.first.update(status: :accepted)
Friendship.first.update(status: :pending)
Friendship.first.update(status: :accepted)
Friendship.first.update(status: :pending)
Friendship.first
friendship.first
Firendship.first
params
chatroom.reload
chatroom.users.select(i
chatroom.users.find_by(id: 3)
chatroom.users.find_by(:id 3)
chatroom.users.where(id: '3')
chatroom.users.where(id: 3)
chatroom.users.first.id
chatroom.users
Chatroom.first.users
chatroom.users.first.id
chatroom.users.where(id: 3)
chatroom.users.find(chatroom.users.first.id)
chatroom.users.find(chatroom.users.first)
chatroom.users.first.id
chatroom.users
chatroom.class
chatroom.classs
Chatroom.first.class
Chatroom.first.users.where(id: 1)
Chatroom.first.users
Chatroom.first
Charoom.first
 chatroom.joins(:users).users.where(id: 3)
 chatroom.users.where(id: 3)
 chatroom.users
 chatroom.users.where.not(id: user.id)
 chatroom.users.where.not(id: user.id)&.first
user
chatroom.users
exit
c
chatroom.users.size
chatroom.users
c
can?(:read, Chatroom)
can(:read, Chatroom)
c
"user_" + @friendship.friend.id.to_s
"user_" + @friendship.friend.id
"user_" + @friendship.friend
@friendship.friend
ok
c
exit
exxit
c
return
c
current_user.friendships.first
@pending_friendships = Friendship.where(friend_id: current_user)
@pending_friendships = Friendship.where(friend_id: current_user, status: :pending)
Friendship.all[-2..-1].first
current_user.friendships.size
current_user.friendships
current_user.friendship.size
Friendship.all[-2..-1].pluck(:user_id)
Friendship.all[-2..-1].pluck(:friend_id)
Friendship.all[-2..-1].pluck(:friend)
Friendship.all[-2..-1].pluck(:id)
Friendship.all[-2..-1].ids
Friendship.all[-2..-1]
Friendships.all[-2..-1]
Friendships[-2..-1]
Friendships-2..-1
current_user.friendships
current_user.friendship
current_user
c
exit
exiut
c
Friendship.last
fr
c
plop =  Friendship.find_or_create_by(user: friend, friend: user, status: :pending)
Friendship.last
exit
Friendship.first.users
Friendship.first
user
current_user.friends.ids
current_user.friends
c
chatroom_path(Chatroom.first)
chatrooms_path(Chatroom.first)
friendships_path(friendship: { friend_id: user.id})
friendships_path(friendship: { friend_id: user.id}
friendships_path(friendship)
c
friendship.class
friendship
c
self
friendships
c
user
c
user.id
c
user.id
user
c
friendships.find_by(friend:user)
friendships.find_by(friend: other_user)
c
friendships.find_by(friend:user)c
user
c
user.friendship_with(current_user)
cuser.friendship_with(current_user)
c
locals:friendship
locals.friendship
locals
friendship
c
friendship
c
friendship
c
cc
c
params
c
params
c
params
c
"edit_#{@message}"
dom_id('edit', @message)
dom_id(:edit, @message)
- dom_id(:edit, @message)
c
 @message.errors
 @message.save
 @message.errors
c
 @message.errors
 @message.save
c
 @message.save
c
 @message.save
message.save
