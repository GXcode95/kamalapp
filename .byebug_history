c
 @chatroom.errors
c
plop
plop[:user_ids] << 4
plop.user_ids << 4
plop = chatroom_params
Chatroom.joins(:users).find_by(users:chatroom_params[:user_ids] << current_user.id )
chatroom_params[:user_ids]
chatroom_params[:user_ids
c
Chatroom.joins(:users).find_by(users: [
Chatroom.joins(:users).find_by(users: 1,4)
User.first.chatrooms.joins(:users).first.users.ids
User.first.chatrooms.joins(:users).first.users
User.first.chatrooms.joins(:users).find_by(users: 2)
User.first.chatrooms.joins(:users).find_by(user: 2)
User.first.chatrooms
User.chatrooms
ChatroomsUser.first
ChatroomsUser.where(users: 0)
chatroom2 = current_user.chatrooms.where(users: chatroom_params[:user_ids]).first
chatroom2
chatroom2 = current_user.chatrooms.where(users: chatroom_params[:user_ids])
chatroom2 = current_user.chatrooms
chatroom2 = current_user.chatrooms.where(users: chatroom_params[:user_ids])
chatroom
c
@chatroom.errors
c
@chatroom.errors
c
@chatroom.errors
@chatroom.erros
c
return
@chatroom.users
@chatroom.userss
@chatroom = Chatroom.new(chatroom_params)
c
return
c
users
c
self.users
users
c
Message.all.last.clascs
c
message
Message.all.last.class
message.class
chatroom.class
message
chatroom_messages_path(message.chatroom, message)
message.errors
message
c
 @message
c
message.errors
c
message.errors
c
message.errors
message.valid?
message.content.body
message.content
message.errors
c
c!
c
message
c
@message.valid?
c
@message.contentc
@message.content
@message.contetn
message.content
message.content.length
@message.valid?
c
message
c
notif_type
c
message
type
c
b
a
c
